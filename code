#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_DISH 100
#define MAX_TABLE 50
#define MAX_CUSTOMER 200
#define MAX_ORDER_ITEMS 50

typedef struct {
    int dishId;
    char name[50];
    char category[20];
    float price;
    char description[100];
} Dish;

typedef struct {
    int tableId;
    int capacity;
} Table;

typedef struct {
    int dishId;
    int quantity;
} OrderItem;

typedef struct {
    long long customerId;
    int tableId;
    char phone[12];
    char name[30];
    OrderItem orderList[MAX_ORDER_ITEMS];
    int orderCount;
    char datetime[20];
    int status;  // 1=就餐 2=打包 0=已结账
} Customer;

// 全局数据
Dish dishes[MAX_DISH];
int dishCount = 0;

Table tables[MAX_TABLE];
int tableCount = 0;

Customer customers[MAX_CUSTOMER];
int customerCount = 0;

// 工具函数
long long generateCustomerId() {
    static long long id = 1000000000;
    return id++;
}

void getCurrentDateTime(char* buffer, int len) {
    time_t t = time(NULL);
    struct tm *tm_info = localtime(&t);
    strftime(buffer, len, "%Y-%m-%d %H:%M:%S", tm_info);
}

Dish* findDishById(int id) {
    for(int i=0; i<dishCount; i++) {
        if(dishes[i].dishId == id) return &dishes[i];
    }
    return NULL;
}

Table* findTableById(int id) {
    for(int i=0; i<tableCount; i++) {
        if(tables[i].tableId == id) return &tables[i];
    }
    return NULL;
}

Customer* findCustomer(int tableId, char* phone) {
    for(int i=0; i<customerCount; i++) {
        if(customers[i].tableId == tableId && strcmp(customers[i].phone, phone)==0 && customers[i].status != 0) {
            return &customers[i];
        }
    }
    return NULL;
}

// ======= 菜品管理 =======
void addDish() {
    if(dishCount >= MAX_DISH) {
        printf("菜品数量已满，无法添加。\n");
        return;
    }
    Dish d;
    d.dishId = (dishCount == 0) ? 1001 : dishes[dishCount-1].dishId + 1;

    printf("请输入菜名: ");
    scanf(" %[^\n]", d.name);
    printf("请输入类别: ");
    scanf(" %[^\n]", d.category);
    printf("请输入价格: ");
    scanf("%f", &d.price);
    printf("请输入简介: ");
    scanf(" %[^\n]", d.description);

    dishes[dishCount++] = d;
    printf("添加成功！菜品编号是：%d\n", d.dishId);
}

void listDishes() {
    if(dishCount == 0) {
        printf("当前无菜品。\n");
        return;
    }
    printf("编号\t名称\t类别\t价格\t简介\n");
    for(int i=0; i<dishCount; i++) {
        printf("%d\t%s\t%s\t%.2f\t%s\n", dishes[i].dishId, dishes[i].name, dishes[i].category, dishes[i].price, dishes[i].description);
    }
}

void deleteDish() {
    printf("请输入要删除的菜品编号: ");
    int id; scanf("%d", &id);
    int idx = -1;
    for(int i=0; i<dishCount; i++) {
        if(dishes[i].dishId == id) { idx = i; break; }
    }
    if(idx == -1) {
        printf("未找到该菜品。\n");
        return;
    }
    for(int i=idx; i<dishCount-1; i++) {
        dishes[i] = dishes[i+1];
    }
    dishCount--;
    printf("删除成功。\n");
}

void modifyDish() {
    printf("请输入要修改的菜品编号: ");
    int id; scanf("%d", &id);
    Dish* d = findDishById(id);
    if(d == NULL) {
        printf("未找到该菜品。\n");
        return;
    }
    printf("修改菜名(当前:%s): ", d->name);
    scanf(" %[^\n]", d->name);
    printf("修改类别(当前:%s): ", d->category);
    scanf(" %[^\n]", d->category);
    printf("修改价格(当前:%.2f): ", d->price);
    scanf("%f", &d->price);
    printf("修改简介(当前:%s): ", d->description);
    scanf(" %[^\n]", d->description);
    printf("修改成功。\n");
}

// ======= 餐桌管理 =======
void addTable() {
    if(tableCount >= MAX_TABLE) {
        printf("餐桌数量已满。\n");
        return;
    }
    Table t;
    printf("请输入餐桌编号（三位整数，如101）: ");
    scanf("%d", &t.tableId);
    if(findTableById(t.tableId) != NULL) {
        printf("该餐桌编号已存在。\n");
        return;
    }
    printf("请输入可就餐人数: ");
    scanf("%d", &t.capacity);
    tables[tableCount++] = t;
    printf("添加成功。\n");
}

void listTables() {
    if(tableCount == 0) {
        printf("当前无餐桌信息。\n");
        return;
    }
    printf("餐桌编号\t可就餐人数\n");
    for(int i=0; i<tableCount; i++) {
        printf("%d\t\t%d\n", tables[i].tableId, tables[i].capacity);
    }
}

void deleteTable() {
    printf("请输入要删除的餐桌编号: ");
    int id; scanf("%d", &id);
    int idx = -1;
    for(int i=0; i<tableCount; i++) {
        if(tables[i].tableId == id) { idx = i; break; }
    }
    if(idx == -1) {
        printf("未找到该餐桌。\n");
        return;
    }
    for(int i=idx; i<tableCount-1; i++) {
        tables[i] = tables[i+1];
    }
    tableCount--;
    printf("删除成功。\n");
}

void modifyTable() {
    printf("请输入要修改的餐桌编号: ");
    int id; scanf("%d", &id);
    Table* t = findTableById(id);
    if(t == NULL) {
        printf("未找到该餐桌。\n");
        return;
    }
    printf("修改可就餐人数(当前:%d): ", t->capacity);
    scanf("%d", &t->capacity);
    printf("修改成功。\n");
}

// ======= 用餐者登录注册 =======
Customer* userRegister() {
    printf("请输入桌号（三位整数）: ");
    int tableId; scanf("%d", &tableId);
    if(findTableById(tableId) == NULL) {
        printf("餐桌不存在，请联系管理员添加。\n");
        return NULL;
    }
    char phone[12], name[30];
    printf("请输入电话号码（11位）: ");
    scanf("%s", phone);
    if(strlen(phone) != 11) {
        printf("电话号码格式错误。\n");
        return NULL;
    }
    printf("请输入姓名: ");
    scanf(" %[^\n]", name);

    Customer* existing = findCustomer(tableId, phone);
    if(existing != NULL) {
        printf("欢迎回来，%s！\n", existing->name);
        return existing;
    }

    if(customerCount >= MAX_CUSTOMER) {
        printf("用餐者数量已满，无法注册。\n");
        return NULL;
    }

    Customer c;
    c.customerId = generateCustomerId();
    c.tableId = tableId;
    strcpy(c.phone, phone);
    strcpy(c.name, name);
    c.orderCount = 0;
    getCurrentDateTime(c.datetime, sizeof(c.datetime));
    c.status = 1; // 默认就餐

    customers[customerCount++] = c;
    printf("注册成功！您的编号是%lld\n", c.customerId);
    return &customers[customerCount-1];
}

// ======= 用餐者点餐 =======
void userOrder(Customer *cust) {
    while(1) {
        listDishes();
        printf("请输入要点的菜品编号（0退出点餐）: ");
        int dishId; scanf("%d", &dishId);
        if(dishId == 0) break;

        Dish* d = findDishById(dishId);
        if(d == NULL) {
            printf("无效的菜品编号。\n");
            continue;
        }
        printf("请输入数量: ");
        int qty; scanf("%d", &qty);
        if(qty <= 0) {
            printf("数量必须大于0。\n");
            continue;
        }
        int found = 0;
        for(int i=0; i<cust->orderCount; i++) {
            if(cust->orderList[i].dishId == dishId) {
                cust->orderList[i].quantity += qty;
                found = 1;
                break;
            }
        }
        if(!found) {
            if(cust->orderCount >= MAX_ORDER_ITEMS) {
                printf("订单已满，无法再点更多菜品。\n");
                break;
            }
            cust->orderList[cust->orderCount].dishId = dishId;
            cust->orderList[cust->orderCount].quantity = qty;
            cust->orderCount++;
        }
        printf("点餐成功！\n");
    }
}

// 显示用餐者订单详情
void showCustomerOrder(Customer *cust) {
    if(cust->orderCount == 0) {
        printf("您还没有点餐。\n");
        return;
    }
    printf("订单详情：\n");
    printf("菜名\t单价\t数量\t小计\n");
    float total = 0.0;
    for(int i=0; i<cust->orderCount; i++) {
        Dish* d = findDishById(cust->orderList[i].dishId);
        if(d) {
            float sub = d->price * cust->orderList[i].quantity;
            printf("%s\t%.2f\t%d\t%.2f\n", d->name, d->price, cust->orderList[i].quantity, sub);
            total += sub;
        }
    }
    printf("总计金额：%.2f\n", total);
}

// 用餐者结账
void userPay(Customer *cust) {
    showCustomerOrder(cust);
    printf("确认结账吗？（y/n）: ");
    char ch; scanf(" %c", &ch);
    if(ch == 'y' || ch == 'Y') {
        cust->status = 0; // 标记已结账
        printf("结账成功，欢迎下次光临！\n");
    } else {
        printf("取消结账。\n");
    }
}

// 用餐者界面
void userMenu() {
    Customer *cust = userRegister();
    if(cust == NULL) return;

    int choice;
    while(1) {
        printf("\n--- 用餐者菜单 ---\n");
        printf("1. 浏览菜单\n");
        printf("2. 点餐\n");
        printf("3. 查看订单\n");
        printf("4. 结账\n");
        printf("5. 退出用餐者模式\n");
        printf("请选择: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1: listDishes(); break;
            case 2: userOrder(cust); break;
            case 3: showCustomerOrder(cust); break;
            case 4: userPay(cust); break;
            case 5: printf("退出用餐者模式。\n"); return;
            default: printf("无效选择。\n");
        }
    }
}

// ======= 管理员查询用餐者订单 =======
void queryOrders() {
    printf("请输入菜品名称或编号进行查询（输入0退出）: ");
    char input[50];
    scanf(" %[^\n]", input);
    if(strcmp(input, "0") == 0) return;

    int dishId = 0;
    Dish *dish = NULL;
    // 判断输入是否为编号
    if(sscanf(input, "%d", &dishId) == 1) {
        dish = findDishById(dishId);
        if(dish == NULL) {
            printf("没有找到对应菜品编号。\n");
            return;
        }
    } else {
        // 按名字查找
        for(int i=0; i<dishCount; i++) {
            if(strstr(dishes[i].name, input) != NULL) {
                dish = &dishes[i];
                break;
            }
        }
        if(dish == NULL) {
            printf("没有找到对应菜品名称。\n");
            return;
        }
    }

    printf("查询菜品：%s（编号%d）\n", dish->name, dish->dishId);
    int totalQty = 0;
    float totalAmount = 0.0;

    printf("用餐者点餐详情:\n");
    printf("编号\t姓名\t桌号\t电话\t数量\t时间\n");
    for(int i=0; i<customerCount; i++) {
        Customer *c = &customers[i];
        for(int j=0; j<c->orderCount; j++) {
            if(c->orderList[j].dishId == dish->dishId) {
                printf("%lld\t%s\t%d\t%s\t%d\t%s\n", c->customerId, c->name, c->tableId, c->phone, c->orderList[j].quantity, c->datetime);
                totalQty += c->orderList[j].quantity;
                totalAmount += c->orderList[j].quantity * dish->price;
            }
        }
    }
    printf("该菜品总点餐量：%d，总营业额：%.2f\n", totalQty, totalAmount);
}

// ======= 管理员界面 =======
void adminMenu() {
    int choice;
    while(1) {
        printf("\n--- 管理员菜单 ---\n");
        printf("1. 菜品管理\n");
        printf("2. 餐桌管理\n");
        printf("3. 查询用餐者点餐情况及统计\n");
        printf("4. 退出管理员模式\n");
        printf("请选择: ");
        scanf("%d", &choice);

        if(choice == 1) {
            int c2;
            printf("\n--- 菜品管理 ---\n");
            printf("1. 添加菜品\n");
            printf("2. 删除菜品\n");
            printf("3. 修改菜品\n");
            printf("4. 查看菜品\n");
            printf("5. 返回上级菜单\n");
            printf("请选择: ");
            scanf("%d", &c2);
            switch(c2) {
                case 1: addDish(); break;
                case 2: deleteDish(); break;
                case 3: modifyDish(); break;
                case 4: listDishes(); break;
                case 5: break;
                default: printf("无效选择。\n");
            }
        } else if(choice == 2) {
            int c2;
            printf("\n--- 餐桌管理 ---\n");
            printf("1. 添加餐桌\n");
            printf("2. 删除餐桌\n");
            printf("3. 修改餐桌\n");
            printf("4. 查看餐桌\n");
            printf("5. 返回上级菜单\n");
            printf("请选择: ");
            scanf("%d", &c2);
            switch(c2) {
                case 1: addTable(); break;
                case 2: deleteTable(); break;
                case 3: modifyTable(); break;
                case 4: listTables(); break;
                case 5: break;
                default: printf("无效选择。\n");
            }
        } else if(choice == 3) {
            queryOrders();
        } else if(choice == 4) {
            printf("退出管理员模式。\n");
            break;
        } else {
            printf("无效选择。\n");
        }
    }
}

// ======= 主菜单 =======
int main() {
    while(1) {
        printf("\n==== 欢迎进入餐厅点餐系统 ====\n");
        printf("1. 管理员模式\n");
        printf("2. 用餐者模式\n");
        printf("3. 退出系统\n");
        printf("请选择: ");
        int choice;
        scanf("%d", &choice);
        if(choice == 1) {
            adminMenu();
        } else if(choice == 2) {
            userMenu();
        } else if(choice == 3) {
            printf("谢谢使用，再见！\n");
            break;
        } else {
            printf("无效选择。\n");
        }
    }
    return 0;
}
